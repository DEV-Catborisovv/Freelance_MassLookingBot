// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: client_bot.proto

package client_bot_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientTelegramBotClient is the client API for ClientTelegramBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientTelegramBotClient interface {
	GetPhoneNumber(ctx context.Context, in *GetPhoneNumberRequest, opts ...grpc.CallOption) (*GetPhoneNumberResponse, error)
	GetSecureCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error)
}

type clientTelegramBotClient struct {
	cc grpc.ClientConnInterface
}

func NewClientTelegramBotClient(cc grpc.ClientConnInterface) ClientTelegramBotClient {
	return &clientTelegramBotClient{cc}
}

func (c *clientTelegramBotClient) GetPhoneNumber(ctx context.Context, in *GetPhoneNumberRequest, opts ...grpc.CallOption) (*GetPhoneNumberResponse, error) {
	out := new(GetPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/client_bot.ClientTelegramBot/GetPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientTelegramBotClient) GetSecureCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error) {
	out := new(GetCodeResponse)
	err := c.cc.Invoke(ctx, "/client_bot.ClientTelegramBot/GetSecureCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientTelegramBotServer is the server API for ClientTelegramBot service.
// All implementations must embed UnimplementedClientTelegramBotServer
// for forward compatibility
type ClientTelegramBotServer interface {
	GetPhoneNumber(context.Context, *GetPhoneNumberRequest) (*GetPhoneNumberResponse, error)
	GetSecureCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error)
	mustEmbedUnimplementedClientTelegramBotServer()
}

// UnimplementedClientTelegramBotServer must be embedded to have forward compatible implementations.
type UnimplementedClientTelegramBotServer struct {
}

func (UnimplementedClientTelegramBotServer) GetPhoneNumber(context.Context, *GetPhoneNumberRequest) (*GetPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoneNumber not implemented")
}
func (UnimplementedClientTelegramBotServer) GetSecureCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecureCode not implemented")
}
func (UnimplementedClientTelegramBotServer) mustEmbedUnimplementedClientTelegramBotServer() {}

// UnsafeClientTelegramBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientTelegramBotServer will
// result in compilation errors.
type UnsafeClientTelegramBotServer interface {
	mustEmbedUnimplementedClientTelegramBotServer()
}

func RegisterClientTelegramBotServer(s grpc.ServiceRegistrar, srv ClientTelegramBotServer) {
	s.RegisterService(&ClientTelegramBot_ServiceDesc, srv)
}

func _ClientTelegramBot_GetPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTelegramBotServer).GetPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_bot.ClientTelegramBot/GetPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTelegramBotServer).GetPhoneNumber(ctx, req.(*GetPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientTelegramBot_GetSecureCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTelegramBotServer).GetSecureCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_bot.ClientTelegramBot/GetSecureCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTelegramBotServer).GetSecureCode(ctx, req.(*GetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientTelegramBot_ServiceDesc is the grpc.ServiceDesc for ClientTelegramBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientTelegramBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client_bot.ClientTelegramBot",
	HandlerType: (*ClientTelegramBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhoneNumber",
			Handler:    _ClientTelegramBot_GetPhoneNumber_Handler,
		},
		{
			MethodName: "GetSecureCode",
			Handler:    _ClientTelegramBot_GetSecureCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_bot.proto",
}
